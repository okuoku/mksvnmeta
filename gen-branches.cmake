set(REPO "file:///home/oku/repos/svn/irrlicht")
set(ENV{LANG} "C.UTF8")
set(startrev 1)

include(${CMAKE_CURRENT_LIST_DIR}/branchmgr.cmake)

function(xml_xslt res xslt input)
    execute_process(
        COMMAND xsltproc ${xslt} ${input}
        OUTPUT_VARIABLE out
        RESULT_VARIABLE rr)
    if(rr)
        message(FATAL_ERROR "xsltproc: ${rr}")
    endif()
    set(${res} "${out}" PARENT_SCOPE)
endfunction()

function(make_revfile_path res prefix rev)
    # Output ${prefix}/XXXX/YYY.log.xml with zero-filled
    math(EXPR yyy "${rev}%1000")
    math(EXPR xxxx "(${rev}-${yyy})/1000")
    if(${xxxx} LESS 10)
        set(xxxx "000${xxxx}")
    elseif(${xxxx} LESS 100)
        set(xxxx "00${xxxx}")
    elseif(${xxxx} LESS 1000)
        set(xxxx "0${xxxx}")
    endif()
    if(${yyy} LESS 10)
        set(yyy "00${yyy}")
    elseif(${yyy} LESS 100)
        set(yyy "0${yyy}")
    endif()
    set(${res} "${prefix}/${xxxx}/${yyy}.log.xml" PARENT_SCOPE)
endfunction()

file(READ ${CMAKE_CURRENT_BINARY_DIR}/currev.txt in)
if("${in}" MATCHES "revision:([0-9]*)")
    set(endrev ${CMAKE_MATCH_1})
else()
    message(FATAL_ERROR "currev parse error: ${in}")
endif()

message(STATUS "endrev = ${endrev}")

# Load static-branch data
include(${CMAKE_CURRENT_BINARY_DIR}/static-branches.cmake)

# Skip specified region
if(${skiprev} GREATER ${startrev})
    set(startrev ${skiprev})
endif()

# 

set(currev ${startrev})
while(1)
    if(${currev} GREATER ${endrev})
        break()
    endif()
    #message(STATUS "Proc(${currev}/${endrev})")
    make_revfile_path(pth ${CMAKE_CURRENT_BINARY_DIR} ${currev})
    set(res)
    xml_xslt(res ${CMAKE_CURRENT_LIST_DIR}/parselog.xml ${pth})
    string(REGEX REPLACE "\n" ";" res "${res}")
    foreach(l ${res})
        if("${l}" MATCHES "branch:([0-9]*):([^\t]*)\t(.*)")
            set(fromrev ${CMAKE_MATCH_1})
            set(from ${CMAKE_MATCH_2})
            set(to ${CMAKE_MATCH_3})
            set(p)
            set(valid)
            branch_p(p ${from} ${fromrev})
            if(p)
                message(STATUS "Branch: [${from}](${fromrev}) => [${to}]")
                branch_open(${to} ${currev} ${from} ${fromrev})
            else()
                message(STATUS "Ignore: [${from}](${fromrev}) => [${to}]")
            endif()
        elseif("${l}" MATCHES "branchclose:(.*)")
            set(branch ${CMAKE_MATCH_1})
            set(p)
            set(valid)
            branch_p(p ${branch} ${currev})
            if(p)
                message(STATUS "BranchClose: [${branch}]")
                branch_close(${branch} ${currev})
            else()
                message(STATUS "Ignore: [${branch}]")
            endif()
        else()
            message(FATAL_ERROR "Unknown log fragment ${l}")
        endif()
    endforeach()
    math(EXPR currev "${currev}+1")
endwhile()

branch_dump(out)

file(WRITE branches.txt "${out}")
